#!/bin/bash

#made by zeroz/tj

#dependencies:
#pacman,expac,flock
#optdepends:
#yay

# Add process group management
set -m # Enable job control

# Process management
declare -a CHILD_PIDS
MAX_CONCURRENT_PROCESSES=4 # Limit concurrent processes
CLEANUP_IN_PROGRESS=0

# Trap function to handle Ctrl+C and cleanup
cleanup() {
    # Prevent recursive cleanup
    if [ "$CLEANUP_IN_PROGRESS" = "1" ]; then
        return
    fi
    CLEANUP_IN_PROGRESS=1

    # Only print message once from parent
    if [ $$ = $PPID ]; then
        echo -e "\n${COL_YELLOW}Cancelling search...${COL_RESET}"
    fi

    trap - SIGINT SIGTERM EXIT

    # kill children
    if [ ${#CHILD_PIDS[@]} -gt 0 ]; then
        for pid in "${CHILD_PIDS[@]}"; do
            if kill -0 "$pid" 2>/dev/null; then
                kill -TERM "$pid" 2>/dev/null || true
            fi
        done
    fi

    # kill any leftover
    pkill -P $$ 2>/dev/null || true

    rm -f /tmp/pacheck.lock

    exit 0
}

# Set up traps
trap cleanup SIGINT SIGTERM EXIT

# Function to manage background processes
manage_processes() {
    while [ $(jobs -p | wc -l) -ge $MAX_CONCURRENT_PROCESSES ]; do
        wait -n 2>/dev/null || break
    done
}

# Function to add child PID to tracking array
track_child() {
    CHILD_PIDS+=("$1")
    manage_processes
}

# Pretty sh colors
COL_RESET="\e[0m"
COL_BOLD="\e[1m"
COL_RED="\e[31m"
COL_GREEN="\e[32m"
COL_YELLOW="\e[33m"
COL_BLUE="\e[34m"
COL_CYAN="\e[36m"
COL_MAGENTA="\e[35m"
COL_BOLD_CYAN="\e[1;36m"
COL_BOLD_YELLOW="\e[1;33m"
COL_BOLD_BLUE="\e[1;34m"
COL_DIM="\e[2m"
COL_BG_YELLOW="\e[43m"
COL_BLACK="\e[30m"
COL_HIGHLIGHT="\e[94m" # light blue
COL_LIGHT_MAGENTA="\e[95m"

# Function to get package repo type and color
get_repo_type() {
    local pkg=$1
    local repo=$2

    case "$repo" in
    "core") echo -e "${COL_RED}core${COL_RESET}" ;;
    "extra") echo -e "${COL_GREEN}extra${COL_RESET}" ;;
    "community") echo -e "${COL_MAGENTA}community${COL_RESET}" ;;
    "multilib") echo -e "${COL_CYAN}multilib${COL_RESET}" ;;
    "testing") echo -e "${COL_YELLOW}testing${COL_RESET}" ;;
    "community-testing") echo -e "\e[38;2;255;165;0mcommunity-testing${COL_RESET}" ;; # orange
    "extra-testing") echo -e "\e[38;2;138;43;226mextra-testing${COL_RESET}" ;;        # blueviolet
    "multilib-testing") echo -e "\e[38;2;219;112;147mmultilib-testing${COL_RESET}" ;; # palevioletred
    *)
        # Use hash-based color for unknown repos. generate
        local color=$(get_hash_color "$repo")
        echo -e "${color}${repo}${COL_RESET}"
        ;;
    esac
}

# Cache package data using expac
cache_package_data() {
    # Get all installed package info
    declare -gA pkg_versions
    while IFS=' ' read -r pkg version; do
        pkg_versions[$pkg]=$version
    done < <(pacman -Q)

    # Debug: Show what expac is returning
    #echo "DEBUG: First few lines of expac output:"
    #expac -S '%n\t%v\t%r\t%d' | head -n 3 >&2

    # Cache official repo data using expac
    declare -gA official_versions
    declare -gA official_repos
    declare -gA official_descriptions

    while IFS=$'\t' read -r name version repo description; do
        # Debug: Show what we're parsing for a few packages
        #[[ $name == lib32-* ]] && echo "DEBUG: Parsing $name | $version | $repo" >&2

        official_versions[$name]=$version
        official_repos[$name]=$repo
        official_descriptions[$name]=$description
    done < <(expac -S '%n\t%v\t%r\t%d')

    # debug only echos
    #echo "DEBUG: Cached data for lib32-libtheora:"
    #echo "Version: ${official_versions[lib32-libtheora]}"
    #echo "Repo: ${official_repos[lib32-libtheora]}"
}

# arch official installed
process_installed_pkgs() {
    local pkg=$1
    local current_version="${pkg_versions[$pkg]}"
    local remote_version="${official_versions[$pkg]}"
    local repo="${official_repos[$pkg]}"
    local description="${official_descriptions[$pkg]}"
    local repo_type=$(get_repo_type "$pkg" "$repo")

    # Early exit if cleanup is in progress
    if [ "$CLEANUP_IN_PROGRESS" = "1" ]; then
        return 1
    fi

    {
        flock -x 200
        if [ "$CLEANUP_IN_PROGRESS" = "0" ]; then
            printf "%b" "${COL_GREEN}$CHECK_MARK $pkg${COL_RESET} ${COL_CYAN}(v$current_version)${COL_RESET}\n"

            if [ -n "$description" ]; then
                if [ "$search_desc" = true ]; then
                    local highlighted_desc="$description"
                    for term in "${search_terms[@]}"; do
                        highlighted_desc=$(echo "$highlighted_desc" | sed "s/\($term\)/\\${COL_HIGHLIGHT}\1\\${COL_RESET}\\${COL_DIM}/gi")
                    done
                    printf "%b" "${COL_DIM}$highlighted_desc${COL_RESET}\n"
                else
                    printf "%b" "${COL_DIM}$description${COL_RESET}\n"
                fi
            fi

            printf "%b" "${COL_BLUE}└─ Source: Official repositories [${COL_RESET}${repo_type}${COL_BLUE}]${COL_RESET}\n"

            if [[ -z "$remote_version" ]]; then
                printf "%b" "${COL_YELLOW}   $WARNING Unable to fetch remote version${COL_RESET}\n"
            elif [[ "$current_version" != "$remote_version" ]]; then
                local colored_current=$(compare_versions "$current_version" "$remote_version")
                local colored_remote=$(compare_versions "$remote_version" "$current_version")
                printf "%b" "   ${COL_YELLOW}$UP_ARROW Update available: ${COL_RESET}v$colored_current -> v$colored_remote\n"
            else
                printf "%b" "${COL_GREEN}   $CHECK_MARK Up to date${COL_RESET}\n"
            fi
            printf "\n"
        fi
    } 200>/tmp/pacheck.lock &

    local display_pid=$!
    CHILD_PIDS+=($display_pid)

    # Wait for this display to complete before moving to next
    wait $display_pid 2>/dev/null || true

    # Check if cleanup was triggered during processing
    if [ "$CLEANUP_IN_PROGRESS" = "1" ]; then
        return 1
    fi

    return 0
}

# remote repo handling...pacman is slow af compared to yay
process_remote_pkg() {
    local pkg=$1
    local vers="${official_versions[$pkg]}"
    local repo="${official_repos[$pkg]}"
    local description="${official_descriptions[$pkg]}"
    local repo_type=$(get_repo_type "$pkg" "$repo")

    # Early exit if cleanup is in progress
    if [ "$CLEANUP_IN_PROGRESS" = "1" ]; then
        return 1
    fi

    {
        flock -x 200
        if [ "$CLEANUP_IN_PROGRESS" = "0" ]; then
            printf "%b" "${COL_RED}$X_MARK $pkg${COL_RESET} ${COL_CYAN}(v$vers)${COL_RESET}\n"
            if [ -n "$description" ]; then
                if [ "$search_desc" = true ]; then
                    local highlighted_desc="$description"
                    for term in "${search_terms[@]}"; do
                        highlighted_desc=$(echo "$highlighted_desc" | sed "s/\($term\)/\\${COL_HIGHLIGHT}\1\\${COL_RESET}\\${COL_DIM}/gi")
                    done
                    printf "%b" "${COL_DIM}$highlighted_desc${COL_RESET}\n"
                else
                    printf "%b" "${COL_DIM}$description${COL_RESET}\n"
                fi
            fi
            printf "%b" "${COL_BLUE}└─ Available in official repositories [${COL_RESET}${repo_type}${COL_BLUE}]${COL_RESET}\n\n"
        fi
    } 200>/tmp/pacheck.lock &

    local display_pid=$!
    CHILD_PIDS+=($display_pid)

    # Wait for this display to complete
    wait $display_pid 2>/dev/null || true

    # Check if cleanup was triggered during processing
    if [ "$CLEANUP_IN_PROGRESS" = "1" ]; then
        return 1
    fi

    return 0
}

# generate a hash for repos color based on it's name. If its unique...
get_hash_color() {
    local str=$1
    local hash=$(echo -n "$str" | md5sum | cut -d' ' -f1)
    local r=$((0x${hash:0:2}))
    local g=$((0x${hash:2:2}))
    local b=$((0x${hash:4:2}))
    # Ensure minimum brightness for readability
    r=$(((r + 128) % 256))
    g=$(((g + 128) % 256))
    b=$(((b + 128) % 256))
    echo "\e[38;2;${r};${g};${b}m"
}

fetch_aur_versions() {
    local pkgs="$1"
    if [ -n "$pkgs" ] && [ "$exclude_aur" = false ]; then
        # Single compact API call just for versions
        local response=$(curl -s -G \
            "https://aur.archlinux.org/rpc/v5/info" \
            $(for pkg in $pkgs; do echo "--data-urlencode arg[]=$pkg"; done))
        
        if [ -n "$response" ]; then
            # Direct assignment using readarray to avoid subshell
            local tempfile=$(mktemp)
            echo "$response" | jq -r '.results[] | select(.Version != null) | "\(.Name) \(.Version)"' > "$tempfile"
            
            while IFS=' ' read -r pkg version; do
                aur_remote_versions["$pkg"]="$version"
            done < "$tempfile"
            
            rm -f "$tempfile"
        fi
    fi
}


# for locally installed aur
cache_aur_descriptions() {
    local pkgs="$1"
    if [ -n "$pkgs" ]; then
        echo "DEBUG: Packages to look up: $pkgs" >&2
        
        # Clear the array first to be safe
        declare -g -A aur_descriptions=()
        
        echo "DEBUG: Raw expac output:" >&2
        expac -Q '%n %d' $pkgs 2>/dev/null | tee /dev/stderr
        
        echo "DEBUG: Processing descriptions..." >&2
        while read -r pkg desc; do
            if [ -n "$pkg" ] && [ -n "$desc" ]; then
                echo "DEBUG: Before set: $pkg current value -> ${aur_descriptions[$pkg]}" >&2
                aur_descriptions[$pkg]="$desc"
                echo "DEBUG: After set: $pkg new value -> ${aur_descriptions[$pkg]}" >&2
            fi
        done < <(expac -Q '%n %d' $pkgs 2>/dev/null)
        
        echo "DEBUG: Immediately after loop:" >&2
        for pkg in $pkgs; do
            echo "DEBUG: $pkg -> ${aur_descriptions[$pkg]}" >&2
        done
        
        echo "DEBUG: Array keys:" >&2
        printf "%s\n" "${!aur_descriptions[@]}" >&2
        
        echo "DEBUG: Array values:" >&2
        printf "%s\n" "${aur_descriptions[@]}" >&2
    fi
}

yay_search() {
    local search_term="$1"
    local batch_size=50
    
    echo "DEBUG YAY: Searching for: $search_term" >&2
    
    (
        # Single request with larger batch size
        local response=$(curl -G --compressed --connect-timeout 10 \
            "https://aur.archlinux.org/rpc/v5/search" \
            --data-urlencode "by=name" \
            --data-urlencode "arg=$search_term" \
            --data-urlencode "limit=$batch_size" 2>/dev/null)

        if [ -z "$response" ] || echo "$response" | jq -e '.error' >/dev/null 2>&1; then
            echo "DEBUG YAY: Empty or error response" >&2
            return 1
        fi

        local count=$(echo "$response" | jq -r '.results | length')
        if [ "$count" -eq 0 ]; then
            echo "DEBUG YAY: No results" >&2
            return 0
        fi

        echo "DEBUG YAY: Processing $count results" >&2
        
        # Output format for package info and description
        echo "$response" | jq -r --arg search "$search_term" '.results[] | 
            select(.Name != null and .Version != null) | 
            "aur/\(.Name) \(.Version)\nDESC:\(.Description)"'
            
    ) &
    local search_pid=$!
    
    wait $search_pid 2>/dev/null || true
    
    if [ "$CLEANUP_IN_PROGRESS" = "1" ]; then
        kill -- -$search_pid 2>/dev/null || true
        return 1
    fi
}

# semantic versioning comparison for color coding
compare_versions() {
    local current=$1
    local remote=$2

    # Remove epoch and release suffix
    current=$(echo "$current" | sed 's/^[0-9]*://' | sed 's/-[^-]*$//')
    remote=$(echo "$remote" | sed 's/^[0-9]*://' | sed 's/-[^-]*$//')

    IFS='.' read -ra current_parts <<<"$current"
    IFS='.' read -ra remote_parts <<<"$remote"

    local output=""
    local different=false
    local max_parts=$((${#current_parts[@]} > ${#remote_parts[@]} ? ${#current_parts[@]} : ${#remote_parts[@]}))

    for ((i = 0; i < max_parts; i++)); do
        local curr_part=${current_parts[$i]:-0}
        local rem_part=${remote_parts[$i]:-0}

        # Handle non-numeric version components
        curr_part=${curr_part//[^0-9]/}
        rem_part=${rem_part//[^0-9]/}

        # Default to 0 if empty after stripping
        curr_part=${curr_part:-0}
        rem_part=${rem_part:-0}

        if [ "$different" = true ]; then
            output+="${COL_RED}${current_parts[$i]:-0}${COL_RESET}"
        elif [ "$curr_part" -lt "$rem_part" ]; then
            output+="${COL_RED}${current_parts[$i]:-0}${COL_RESET}"
            different=true
        elif [ "$curr_part" -gt "$rem_part" ]; then
            output+="${COL_GREEN}${current_parts[$i]:-0}${COL_RESET}"
            different=true
        else
            output+="${current_parts[$i]:-0}"
        fi

        if [ $i -lt $((max_parts - 1)) ]; then
            output+="."
        fi
    done

    if [[ $1 =~ -[0-9]+ ]]; then
        local suffix=$(echo "$1" | grep -o -- '-[0-9]\+')
        if [[ $different == true ]]; then
            output+="${COL_RED}${suffix}${COL_RESET}"
        else
            local curr_rel=$(echo "$1" | grep -o '[0-9]\+$')
            local rem_rel=$(echo "$2" | grep -o '[0-9]\+$')
            if [ "$curr_rel" -lt "$rem_rel" ]; then
                output+="${COL_RED}${suffix}${COL_RESET}"
            elif [ "$curr_rel" -gt "$rem_rel" ]; then
                output+="${COL_GREEN}${suffix}${COL_RESET}"
            else
                output+="$suffix"
            fi
        fi
    fi

    echo "$output"
}

test_version_compare() {
    echo "Testing version comparison..."
    local test_cases=(
        "1.60.0 1.64.0"
        "5.116.0-1 5.116.0-2"
        "1.11.0-1 1.11.1-1"
        "0.21.5-1 0.21.5-2"
    )

    for test in "${test_cases[@]}"; do
        read -r v1 v2 <<<"$test"
        echo -e "\nComparing $v1 -> $v2:"
        echo -e "Current: $(compare_versions "$v1" "$v2")"
        echo -e "Remote:  $(compare_versions "$v2" "$v1")"
    done
    exit 0
}

#testing only
#test_version_compare

show_help() {
    local script_name=$(basename "$0")
    cat <<EOF
${script_name} - Search and check status of Arch Linux packages

Usage: ${script_name} [options] <search-terms...>

Options:
    -h, --help          Show this help message
    -r, --remote        Include remote packages in search
    -d, --desc          Search package descriptions (requires expac)
    -e, --exact         Match package names exactly (case insensitive)
    --exclude-aur       Exclude AUR packages from search results
    --exclude-arch      Exclude official repository packages from search results

Examples:
    ${script_name} python              # Search installed packages for "python"
    ${script_name} -r node             # Search all packages (installed and remote)
    ${script_name} -d git              # Search names and descriptions
    ${script_name} -rd docker          # Search everything, everywhere
    ${script_name} -e wine             # Search for exact package name match
    ${script_name} --exclude-aur git   # Search only in official repositories
    ${script_name} --exclude-arch git  # Search only in AUR

Note:
    The -e flag overrides -d as exact matching doesn't use descriptions.
EOF
}

pkgcheck() {

    local check_remote=false
    local search_desc=false
    local exact_match=false
    local exclude_aur=false
    local exclude_arch=false
    local search_terms=()
    local CHECK_MARK=$'\u2714'
    local X_MARK=$'\u2718'
    local UP_ARROW=$'\u2191'
    local WARNING=$'\u25B2'
    local DIVIDER="────────────────────────────────────"

    # arg parser
    while [[ $# -gt 0 ]]; do
        case "$1" in
        -h | --help)
            show_help
            return 0
            ;;
        -r | --remote)
            check_remote=true
            shift
            ;;
        -d | --desc)
            search_desc=true
            shift
            ;;
        -e | --exact)
            exact_match=true
            search_desc=false # exact match overrides description search
            shift
            ;;
        --exclude-aur)
            exclude_aur=true
            shift
            ;;
        --exclude-arch)
            exclude_arch=true
            shift
            ;;
        -*)
            if [[ "$1" =~ r ]]; then
                check_remote=true
            fi
            if [[ "$1" =~ d ]]; then
                search_desc=true
            fi
            if [[ "$1" =~ e ]]; then
                exact_match=true
                search_desc=false # exact match overrides description search
            fi
            shift
            ;;
        *)
            search_terms+=("$1")
            shift
            ;;
        esac
    done

    if [ ${#search_terms[@]} -eq 0 ]; then
        show_help
        return 1
    fi

    #cache the data
    cache_package_data

    echo -e "${COL_BOLD}Searching for packages: ${search_terms[*]}${COL_RESET}\n"

    # avoid duplicates
    declare -A found_packages
    declare -A pkg_versions
    declare -A remote_versions
    declare -A aur_remote_versions

    # caching
    local all_installed_info=$(pacman -Q)
    local aur_cache=$(pacman -Qm)
    local official_info=$(pacman -Sl)

    while IFS=' ' read -r pkg version; do
        pkg_versions[$pkg]=$version
    done <<<"$all_installed_info"

    # local official check
    if [ "$exclude_arch" = false ]; then
        echo -e "${COL_BOLD_CYAN}Official Repositories Installed:${COL_RESET}"
        echo -e "${COL_BLUE}$DIVIDER${COL_RESET}"
        local installed_count=0

        # Get installed packages
        local installed_pkgs=""
        if [ "$exact_match" = true ]; then
            for term in "${search_terms[@]}"; do
                if [ -n "$installed_pkgs" ]; then
                    installed_pkgs="$installed_pkgs"$'\n'"$(pacman -Q | grep -i "^${term} ")"
                else
                    installed_pkgs="$(pacman -Q | grep -i "^${term} ")"
                fi
            done
        else
            for term in "${search_terms[@]}"; do
                if [ -n "$installed_pkgs" ]; then
                    installed_pkgs="$installed_pkgs"$'\n'"$(pacman -Q | grep -i "$term")"
                else
                    installed_pkgs="$(pacman -Q | grep -i "$term")"
                fi
            done
        fi

        # Process installed packages with better interrupt handling
        while IFS= read -r line; do
            if [ "$CLEANUP_IN_PROGRESS" = "1" ]; then
                break
            fi

            local pkg=$(echo "$line" | cut -d' ' -f1)
            if [[ -n "$pkg" ]] && ! echo "$aur_cache" | grep -q "^${pkg} "; then
                installed_count=$((installed_count + 1))
                found_packages[$pkg]=1

                # Process package and check return status
                if ! process_installed_pkgs "$pkg"; then
                    break
                fi
            fi
        done <<<"$installed_pkgs"

        # Wait for any remaining processes
        wait

        if [ $installed_count -eq 0 ]; then
            echo -e "${COL_RED}$X_MARK No installed packages found${COL_RESET}\n"
        fi
    fi

    # AUR installed packages
    if [ "$exclude_aur" = false ]; then
        local found_aur=false
        local aur_pkgs=""
        local aur_names=""

        # More efficient grep patterns
        if [ "$exact_match" = true ]; then
            aur_pkgs=$(echo "$aur_cache" | grep -E "^($(echo "${search_terms[@]}" | tr ' ' '|')) ")
        elif [ "$search_desc" = true ] && command -v expac >/dev/null 2>&1; then
            aur_pkgs=$(expac -Q '%n %d' | grep -E "($(echo "${search_terms[@]}" | tr ' ' '|'))" | grep -F -f <(echo "$aur_cache" | cut -d' ' -f1))
        else
            aur_pkgs=$(echo "$aur_cache" | grep -E "($(echo "${search_terms[@]}" | tr ' ' '|'))")
        fi

        aur_names=$(echo "$aur_pkgs" | cut -d' ' -f1)

        # Only proceed if we found any AUR packages
        if [ -n "$aur_names" ]; then
            # Print the AUR header once before processing packages
            echo -e "${COL_YELLOW}$DIVIDER${COL_RESET}"
            echo -e "${COL_BOLD_YELLOW}AUR Installed:${COL_RESET}"
            found_aur=true

            # Fetch versions synchronously but with interrupt check
            if [ "$CLEANUP_IN_PROGRESS" = "0" ]; then
                fetch_aur_versions "$aur_names"
                cache_aur_descriptions "$aur_names"
            fi

            # Process and display results with streaming
            while IFS= read -r pkg; do
                if [[ -n "$pkg" ]] && [ "$CLEANUP_IN_PROGRESS" = "0" ]; then
                    {
                        flock -x 200
                        if [ "$CLEANUP_IN_PROGRESS" = "0" ]; then
                            installed_count=$((installed_count + 1))
                            found_packages[$pkg]=1
                            local current_version="${pkg_versions[$pkg]}"
                            local remote_version="${aur_remote_versions[$pkg]}"
                            local description="${aur_descriptions[$pkg]}"

                            if [[ "$pkg" =~ -(git|svn|hg|bzr|cvs)$ ]]; then
                                local pkg_type="${COL_CYAN}devel${COL_RESET}"
                            else
                                local pkg_type="${COL_RED}aur${COL_RESET}"
                            fi

                            # Display package with version and description
                            echo -e "${COL_GREEN}$CHECK_MARK $pkg${COL_RESET} ${COL_CYAN}(v$current_version)${COL_RESET}"

                            if [ -n "$description" ]; then
                                if [ "$search_desc" = true ]; then
                                    local highlighted_desc="$description"
                                    for term in "${search_terms[@]}"; do
                                        highlighted_desc=$(echo "$highlighted_desc" | sed "s/\($term\)/\\${COL_HIGHLIGHT}\1\\${COL_RESET}\\${COL_DIM}/gi")
                                    done
                                    printf "%b" "${COL_DIM}$highlighted_desc${COL_RESET}\n"
                                else
                                    printf "%b" "${COL_DIM}$description${COL_RESET}\n"
                                fi
                            fi

                            echo -e "${COL_YELLOW}└─ Source: AUR [${COL_RESET}${pkg_type}${COL_YELLOW}]${COL_RESET}"

                            if [[ -z "$remote_version" ]]; then
                                echo -e "${COL_YELLOW}   $WARNING Unable to fetch remote version${COL_RESET}"
                            elif [[ "$current_version" != "$remote_version" ]]; then
                                local colored_current=$(compare_versions "$current_version" "$remote_version")
                                local colored_remote=$(compare_versions "$remote_version" "$current_version")
                                echo -e "   ${COL_YELLOW}$UP_ARROW Update available: ${COL_RESET}v$colored_current -> v$colored_remote"
                            else
                                echo -e "${COL_GREEN}   $CHECK_MARK Up to date${COL_RESET}"
                            fi
                            echo
                        fi
                    } 200>/tmp/pacheck.lock &

                    local display_pid=$!
                    CHILD_PIDS+=($display_pid)

                    # Wait for this display to complete before moving to next
                    wait $display_pid 2>/dev/null || true

                    # Check cleanup flag after each package
                    if [ "$CLEANUP_IN_PROGRESS" = "1" ]; then
                        break
                    fi
                fi
            done <<<"$aur_names"
        fi
    fi

    # remote check if -r flag
    if [ "$check_remote" = true ]; then
        local remote_count=0
        local found_official=false
        local found_remote_aur=false

        {
            if [ "$exclude_arch" = false ]; then
                local remote_pkgs=""

                if [ "$exact_match" = true ]; then
                    for term in "${search_terms[@]}"; do
                        if [ -n "$remote_pkgs" ]; then
                            remote_pkgs="$remote_pkgs"$'\n'"$(pacman -Sl | grep -i "^[^ ]* ${term} ")"
                        else
                            remote_pkgs="$(pacman -Sl | grep -i "^[^ ]* ${term} ")"
                        fi
                    done
                elif [ "$search_desc" = true ]; then
                    for term in "${search_terms[@]}"; do
                        if [ -n "$remote_pkgs" ]; then
                            remote_pkgs="$remote_pkgs"$'\n'"$(expac -S '%n\t%v\t%r\t%d' | grep -i "$term")"
                        else
                            remote_pkgs="$(expac -S '%n\t%v\t%r\t%d' | grep -i "$term")"
                        fi
                    done
                else
                    for term in "${search_terms[@]}"; do
                        if [ -n "$remote_pkgs" ]; then
                            remote_pkgs="$remote_pkgs"$'\n'"$(pacman -Sl | grep -i "$term")"
                        else
                            remote_pkgs="$(pacman -Sl | grep -i "$term")"
                        fi
                    done
                fi

                if [ -n "$remote_pkgs" ]; then
                    echo -e "${COL_BLUE}$DIVIDER${COL_RESET}"
                    echo -e "${COL_BOLD_BLUE}Official Repositories Available:${COL_RESET}"
                    found_official=true

                    while IFS= read -r line; do
                        local pkg=""
                        if [ "$search_desc" = true ]; then
                            pkg=$(echo "$line" | cut -f1)
                        else
                            pkg=$(echo "$line" | awk '{print $2}')
                        fi

                        if [[ -n "$pkg" ]] && ! pacman -Q "$pkg" &>/dev/null && [[ -z "${found_packages[$pkg]}" ]]; then
                            remote_count=$((remote_count + 1))
                            found_packages[$pkg]=1
                            process_remote_pkg "$pkg"

                            # Limit concurrent processes
                            manage_processes
                        fi
                    done <<<"$remote_pkgs"

                    # Wait for remaining background processes
                    wait
                fi
            fi
        } &

        # print aur remote if not excluded
        if [ "$exclude_aur" = false ]; then
            local temp_file=$(mktemp)
            trap 'rm -f "$temp_file"' EXIT

            # Early exit if cleanup already triggered
            if [ "$CLEANUP_IN_PROGRESS" = "1" ]; then
                rm -f "$temp_file"
                return
            fi

            if [ "$exact_match" = true ]; then
                for term in "${search_terms[@]}"; do
                    if [ "$CLEANUP_IN_PROGRESS" = "1" ]; then
                        break
                    fi
                    if ! yay_search "^${term}$" >>"$temp_file"; then
                        break
                    fi
                done
            elif [ "$search_desc" = true ]; then
                for term in "${search_terms[@]}"; do
                    if [ "$CLEANUP_IN_PROGRESS" = "1" ]; then
                        break
                    fi
                    if ! yay_search "$term" >>"$temp_file"; then
                        break
                    fi
                done
            else
                for term in "${search_terms[@]}"; do
                    if [ "$CLEANUP_IN_PROGRESS" = "1" ]; then
                        break
                    fi
                    if ! yay_search "$term" | grep "^aur/.*$term" >>"$temp_file"; then
                        break
                    fi
                done
            fi

            # Process results only if we haven't been interrupted
            if [ "$CLEANUP_IN_PROGRESS" = "0" ] && [ -s "$temp_file" ]; then
                local first_result=true
                # Read results from temp file
                while IFS= read -r line || [ -n "$line" ]; do
                if [ "$CLEANUP_IN_PROGRESS" = "1" ]; then
                    break
                fi

                if [[ $line =~ ^aur/ ]]; then
                    local pkg=$(echo "$line" | cut -d'/' -f2)
                    local version=$(echo "$pkg" | cut -d' ' -f2)
                    pkg=$(echo "$pkg" | cut -d' ' -f1)
                    local description=""

                    # Read the next line for description if it exists
                    if [ "$search_desc" = true ] || [ "$exact_match" = false ]; then
                        read -r desc_line
                        # Modified to properly extract description
                        if [[ "$desc_line" =~ ^DESC: ]]; then
                            description="${desc_line#DESC:}"
                        fi
                    fi

                        if [[ -n "$pkg" ]] && [[ -z "${found_packages[$pkg]}" ]]; then
                            if [ "$first_result" = true ]; then
                                {
                                    flock -x 200
                                    if [ "$CLEANUP_IN_PROGRESS" = "0" ]; then
                                        echo -e "${COL_YELLOW}$DIVIDER${COL_RESET}"
                                        echo -e "${COL_BOLD_YELLOW}AUR Available:${COL_RESET}"
                                    fi
                                } 200>/tmp/pacheck.lock
                                first_result=false
                                found_remote_aur=true
                            fi

                            remote_count=$((remote_count + 1))
                            found_packages[$pkg]=1

                            if [[ "$pkg" =~ -(git|svn|hg|bzr|cvs)$ ]]; then
                                local pkg_type="${COL_CYAN}devel${COL_RESET}"
                            else
                                local pkg_type="${COL_YELLOW}aur${COL_RESET}"
                            fi

                            # Launch display in background
                            {
                                flock -x 200
                                if [ "$CLEANUP_IN_PROGRESS" = "0" ]; then
                                    echo -e "${COL_RED}$X_MARK $pkg${COL_RESET} ${COL_CYAN}(v$version)${COL_RESET}"
                                    if [ -n "$description" ]; then
                                        if [ "$search_desc" = true ]; then
                                            local highlighted_desc="$description"
                                            for term in "${search_terms[@]}"; do
                                                highlighted_desc=$(echo "$highlighted_desc" | sed "s/\($term\)/\\${COL_HIGHLIGHT}\1\\${COL_RESET}\\${COL_DIM}/gi")
                                            done
                                            printf "%b" "${COL_DIM}$highlighted_desc${COL_RESET}\n"
                                        else
                                            printf "%b" "${COL_DIM}$description${COL_RESET}\n"
                                        fi
                                    fi
                                    echo -e "${COL_YELLOW}└─ Available in AUR [${COL_RESET}${pkg_type}${COL_YELLOW}]${COL_RESET}"
                                    echo
                                fi
                            } 200>/tmp/pacheck.lock &

                            local display_pid=$!
                            CHILD_PIDS+=($display_pid)

                            # Manage concurrent processes
                            manage_processes

                            # Check if cleanup was triggered
                            if [ "$CLEANUP_IN_PROGRESS" = "1" ]; then
                                break
                            fi
                        fi
                    fi
                done <"$temp_file"

                # Wait for any remaining display processes
                wait
            fi

            rm -f "$temp_file"
        fi

        if [ $remote_count -eq 0 ]; then
            echo -e "${COL_RED}$X_MARK No additional packages found in repositories${COL_RESET}"
        fi
    fi
}

main() {
    # Initialize empty CHILD_PIDS array
    CHILD_PIDS=()
    CLEANUP_IN_PROGRESS=0

    # Remove any stale lock file
    rm -f /tmp/pacheck.lock

    # check for yay
    if ! expac -Q '%n' yay &>/dev/null; then
        echo -e "\e[33mWarning: 'yay' is not installed. AUR functionality will be disabled.\e[0m"
        # If no yay, turn on exclude aur flag if not already present
        if [[ ! " $@ " =~ " --exclude-aur " ]]; then
            pkgcheck "$@" --exclude-aur
        else
            pkgcheck "$@"
        fi
    else
        # yay is installed, run normally
        pkgcheck "$@"
    fi

    # wait for all background processes to complete
    wait 2>/dev/null || true
}

main "$@"
